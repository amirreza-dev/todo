{"version":3,"sources":["context/todoContext.js","components/Task/Todo.jsx","components/Task/Todos.jsx","components/Task/AddNewTask.jsx","containers/App.jsx","index.js"],"names":["TodoContext","createContext","todos","todo","createNewTodo","todoInput","changeTodo","completedTodo","deleteTodo","Todo","text","isCompleted","deleted","completed","changed","useState","show","setShow","handleClose","className","onClick","Button","variant","Modal","onHide","Header","closeButton","Body","type","placeholder","onChange","Footer","Todos","context","useContext","length","map","key","id","event","AddNewTask","onSubmit","e","preventDefault","value","App","setTodos","getTodo","setTodo","Provider","getTodos","uuidv4","push","toast","success","position","error","target","personIndex","findIndex","c","changing","information","todoIndex","t","filteredTodos","filter","d","info","render","document","getElementById"],"mappings":"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","file":"static/js/main.c56f1954.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst TodoContext = createContext({\r\n    todos: [],\r\n    todo: '',\r\n    createNewTodo: () => {},\r\n    todoInput: () => {},\r\n    changeTodo: () => {},\r\n    completedTodo: () => {},\r\n    deleteTodo: () => {},\r\n});\r\n\r\nexport default TodoContext;\r\n","import React, { Fragment, useState } from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nconst Todo = ({ text, isCompleted, deleted, completed, changed }) => {\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <Fragment>\r\n            <div\r\n                className={`todo-indicator ${\r\n                    isCompleted ? 'bg-success' : 'bg-warning'\r\n                }`}\r\n            ></div>\r\n            <div className='widget-content p-0'>\r\n                <div className='widget-content-wrapper'>\r\n                    <div className='widget-content-right flex1'>\r\n                        <div className='widget-heading'>\r\n                            {isCompleted ? <del>{text}</del> : text}\r\n                        </div>\r\n                    </div>\r\n                    <div className='widget-content-left'>\r\n                        {' '}\r\n                        <button\r\n                            className='border-0 btn-transition btn btn-outline-success'\r\n                            onClick={completed}\r\n                        >\r\n                            {' '}\r\n                            <i className='fa fa-check' />\r\n                        </button>{' '}\r\n                        <button\r\n                            className='border-0 btn-transition btn btn-outline-danger'\r\n                            onClick={deleted}\r\n                        >\r\n                            {' '}\r\n                            <i className='fa fa-trash' />{' '}\r\n                        </button>{' '}\r\n                        <Button\r\n                            variant='outline-primary'\r\n                            className='border-0 btn-transition'\r\n                            onClick={handleShow}\r\n                        >\r\n                            <i className='fa fa-edit' />\r\n                        </Button>\r\n                        <div className='rtl'>\r\n                            <Modal show={show} onHide={handleClose}>\r\n                                <Modal.Header closeButton />\r\n                                <Modal.Body>\r\n                                    <input\r\n                                        type='text'\r\n                                        placeholder={`تغییر ${text}`}\r\n                                        onChange={changed}\r\n                                    />\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <Button\r\n                                        variant='success'\r\n                                        onClick={handleClose}\r\n                                    >\r\n                                        ذخیره تغییرات\r\n                                    </Button>\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useContext } from 'react';\r\nimport Todo from './Todo';\r\nimport TodoContext from './../../context/todoContext';\r\n\r\nconst Todos = () => {\r\n    const context = useContext(TodoContext);\r\n    const { todos, deleteTodo, completedTodo, changeTodo } = context;\r\n\r\n    return (\r\n        <ul className='list-group list-group-flush'>\r\n            {todos.length > 0 ? (\r\n                todos.map((todo) => (\r\n                    <li key={todo.id} className='list-group-item'>\r\n                        <Todo\r\n                            text={todo.text}\r\n                            isCompleted={todo.completed}\r\n                            deleted={() => deleteTodo(todo.id)}\r\n                            completed={() => completedTodo(todo.id)}\r\n                            changed={(event) => changeTodo(event, todo.id)}\r\n                        />\r\n                    </li>\r\n                ))\r\n            ) : (\r\n                <div className='alert alert-light mt-3 w-75 mx-auto'>\r\n                    <p className='text-center'>\r\n                        هیچ کاری برای امروز ثبت نشده !\r\n                    </p>\r\n                </div>\r\n            )}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default Todos;\r\n","import React, { useContext } from 'react';\r\nimport TodoContext from './../../context/todoContext';\r\n\r\nconst AddNewTask = () => {\r\n    const context = useContext(TodoContext);\r\n\r\n    return (\r\n        <div className='w-50 mx-auto fixed-bottom mb-5 p-3 wrapper'>\r\n            <form\r\n                className='form-inline justify-content-center'\r\n                onSubmit={(e) => e.preventDefault()}\r\n            >\r\n                <div className='input-group w-100'>\r\n                    <input\r\n                        type='text'\r\n                        className='form-control rounded'\r\n                        placeholder='اضافه کردن کار جدید'\r\n                        value={context.todo}\r\n                        onChange={context.todoInput}\r\n                    />\r\n                    <div className='input-group-prepend'>\r\n                        <button\r\n                            type='submit'\r\n                            className='btn bg-transparent fa fa-plus-square text-light'\r\n                            onClick={context.createNewTodo}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddNewTask;\r\n","import React, { useState } from 'react';\r\nimport uuidv4 from 'uuid/v4';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport TodoContext from '../context/todoContext';\r\nimport Todos from '../components/Task/Todos';\r\nimport AddNewTask from '../components/Task/AddNewTask';\r\n\r\nconst App = () => {\r\n    const [todos, setTodos] = useState([]);\r\n    const [getTodo, setTodo] = useState('');\r\n\r\n    const changeTodo = (event, id) => {\r\n        const getTodos = todos;\r\n        const personIndex = getTodos.findIndex((c) => c.id === id);\r\n        const changing = getTodos[personIndex];\r\n        changing.text = event.target.value;\r\n        const information = [...getTodos];\r\n        information[personIndex] = changing;\r\n        setTodos(information);\r\n    };\r\n\r\n    const createNewTodo = () => {\r\n        const getTodos = [...todos];\r\n        const todo = {\r\n            id: uuidv4(),\r\n            text: getTodo,\r\n            completed: false,\r\n        };\r\n        if (todo.text !== '' && todo.text !== ' ') {\r\n            getTodos.push(todo);\r\n            setTodos(getTodos);\r\n            setTodo('');\r\n            toast.success(`${todo.text} یادداشت شد.`, {\r\n                position: 'top-right',\r\n            });\r\n        } else {\r\n            toast.error('فیلد خالی می باشد!', {\r\n                position: 'top-right',\r\n            });\r\n        }\r\n    };\r\n\r\n    const completedTodo = (id) => {\r\n        const getTodos = [...todos];\r\n        const todoIndex = getTodos.findIndex((t) => t.id === id);\r\n        const todo = getTodos[todoIndex];\r\n        todo.completed = !todo.completed;\r\n        getTodos[todoIndex] = todo;\r\n        setTodos(getTodos);\r\n    };\r\n\r\n    const deleteTodo = (id) => {\r\n        const getTodos = [...todos];\r\n        const filteredTodos = getTodos.filter((t) => t.id !== id);\r\n        setTodos(filteredTodos);\r\n        const deleted = getTodos.findIndex((d) => d !== d.id);\r\n        const todo = getTodos[deleted];\r\n        toast.info(`${todo.text} با موفقیت پاک شد.`, {\r\n            position: 'top-right',\r\n        });\r\n    };\r\n\r\n    const todoInput = (event) => {\r\n        setTodo(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <TodoContext.Provider\r\n            value={{\r\n                todos: todos,\r\n                todo: getTodo,\r\n                createNewTodo: createNewTodo,\r\n                todoInput: todoInput,\r\n                changeTodo: changeTodo,\r\n                completedTodo: completedTodo,\r\n                deleteTodo: deleteTodo,\r\n            }}\r\n        >\r\n            <div className='d-flex rtl justify-content-center container'>\r\n                <div className='col-md-8 col-sm-12'>\r\n                    <div className='card-hover-shadow-2x mb-3 card'>\r\n                        <Todos />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <AddNewTask />\r\n            <ToastContainer />\r\n        </TodoContext.Provider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport App from './containers/App';\r\n\r\nrender(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}